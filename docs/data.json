{
    "project": {},
    "files": {
        "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/components/file-dropzone/component.js": {
            "name": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/components/file-dropzone/component.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/components/file-upload/component.js": {
            "name": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/components/file-upload/component.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/helpers/file-queue.js": {
            "name": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/helpers/file-queue.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js": {
            "name": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js",
            "modules": {},
            "classes": {
                "file-queue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js": {
            "name": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "modules": {},
            "classes": {
                "File": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js": {
            "name": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "modules": {},
            "classes": {
                "Queue": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "file-queue": {
            "name": "file-queue",
            "shortname": "file-queue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js",
            "line": 7,
            "description": "The file queue service is a global file\nqueue that manages all files being uploaded.\n\nThis service can be used to query the current\nupload state when a user leaves the app,\nasking them whether they want to cancel\nthe remaining uploads.",
            "extends": "Ember.Service"
        },
        "File": {
            "name": "File",
            "shortname": "File",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 60,
            "description": "Files provide a uniform interface for interacting\nwith data that can be uploaded or read.",
            "extends": "Ember.Object"
        },
        "Queue": {
            "name": "Queue",
            "shortname": "Queue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 7,
            "description": "The Queue is a collection of files that\nare being manipulated by the user.\n\nQueues are designed to persist the state\nof uploads when a user navigates around your\napplication.",
            "extends": "Ember.Object"
        }
    },
    "elements": {
        "file-dropzone": {
            "name": "file-dropzone",
            "attributes": [
                {
                    "name": "name",
                    "description": "The name of the queue that files should be\nadded to when they get dropped."
                },
                {
                    "name": "ondragenter",
                    "description": "`ondragenter` is called when a file has entered\nthe dropzone."
                },
                {
                    "name": "ondragleave",
                    "description": "`ondragleave` is called when a file has left\nthe dropzone."
                },
                {
                    "name": "ondrop",
                    "description": "`ondrop` is called when a file has been dropped."
                },
                {
                    "name": "allowUploadsFromWebsites",
                    "description": "Whether users can upload content\nfrom websites by dragging images from\nanother webpage and dropping it into\nyour app. The default is `false` to\nprevent cross-site scripting issues."
                },
                {
                    "name": "cursor",
                    "description": "This is the type of cursor that should\nbe shown when a drag event happens.\n\nCorresponds to `dropEffect`.\n\nThis is one of the following:\n\n- `copy`\n- `move`\n- `link`"
                }
            ],
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/components/file-dropzone/component.js",
            "line": 21,
            "interface": "Ember.Component"
        },
        "file-upload": {
            "name": "file-upload",
            "attributes": [
                {
                    "name": "accept",
                    "description": "A list of MIME types / extensions to be accepted by the input"
                },
                {
                    "name": "multiple",
                    "description": "Whether multiple files can be selected when uploading."
                },
                {
                    "name": "name",
                    "description": "The name of the queue to upload the file to."
                },
                {
                    "name": "disabled",
                    "description": "If set, disables input and prevents files from being added to the queue"
                },
                {
                    "name": "onfileadd",
                    "description": "`onfileadd` is called when a file is selected.\n\nWhen multiple files are selected, this function\nis called once for every file that was selected."
                }
            ],
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/components/file-upload/component.js",
            "line": 15,
            "description": "`{{file-upload}}` is an element that will open a dialog for\nusers to browse their device for files that they want to upload.\n\nFor the component to work at its best, each `{{file-upload}}`\nshould be named so the upload can be persisted across pages and\nshow the correct upload percentage when a user visits the page.\n\nFor a basic use-case of uploading a file after a form is submitted,\nyou can stash the file for later and upload it on the submission of\nthe form.\n\nFor this example, we'll look at a relatively standard profile form\nusing [`ember-changeset`](https://github.com/DockYard/ember-changeset) to keep track of changes made to the form:\n\n```htmlbars\n{{#with (changeset model) as |changeset|}}\n  <form submit={{action 'submit' changeset}}>\n    <label for='name'>\n    {{input type='string' value=changeset.name id='name'}}\n\n    {{#file-upload name=\"avatar\"\n                   accept=\"image/*\"\n                   onfileadd=(route-action 'setAvatar' changeset)}}\n      {{#if changeset.avatar}}\n        <img src={{changeset.avatar.url}}\n        <a id=\"upload-avatar\" tabindex=0>Add a photo of yourself</a>\n      {{else}}\n        <a id=\"upload-avatar\" tabindex=0>Add a photo of yourself</a>\n      {{/if}}\n    {{/file-upload}}\n  </form>\n{{/with}}\n```\n\n```js\nimport Ember from 'ember';\n\nexport default Ember.Route.extend({\n  actions: {\n    submit: async function (changeset) {\n      if (changeset.avatar) {\n        let file = changeset.avatar;\n        let response = await file.upload('/upload');\n        changeset.set('avatar', {\n          name: file.get('name'),\n          url: response.headers.Location\n        });\n      }\n      this.currentModel.setProperties(changeset.get('change'));\n\n      return this.currentModel.save();\n    },\n    setAvatar: async function (changeset, file) {\n      changeset.set('avatar', file);\n\n      // Set the URL so we can see a preview\n      let url = await file.readAsDataURL();\n      file.set('url', url);\n    }\n  }\n});\n```",
            "interface": "Ember.Component"
        }
    },
    "classitems": [
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/helpers/file-queue.js",
            "line": 6,
            "description": "`file-queue` is one of the core primitives of ember-file-upload.\nIt has three different flavors of invocation. The first is\na bare call, which will return the master queue:\n\n```handlebars\n{{#with (file-queue) as |queue|}}\n  {{queue.progress}}%\n{{/with}}\n```\n\nIf called with a `name` property, it will return the queue\nof that name:\n\n```handlebars\n{{#with (file-queue name=\"photos\") as |queue|}}\n  {{queue.progress}}%\n{{/with}}\n```",
            "access": "public",
            "tagname": "",
            "itemtype": "method",
            "name": "file-queue",
            "return": {
                "description": "A collection of all queues, or a specific queue.",
                "type": "Queue"
            },
            "class": "file-queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js",
            "line": 21,
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "itemtype": "method",
            "name": "Setup a map of uploaders so they may be\naccessed by name via the `find` method.",
            "class": "file-queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js",
            "line": 33,
            "description": "The list of all files in queues. This automatically gets\nflushed when all the files in the queue have settled.\n\nNote that files that have failed need to be manually\nremoved from the queue. This is so they can be retried\nwithout resetting the state of the queue, orphaning the\nfile from its queue. Upload failures can happen due to a\ntimeout or a server response. If you choose to use the\n`abort` method, the file will fail to upload, but will\nbe removed from the requeuing proccess, and will be\nconsidered to be in a settled state.",
            "itemtype": "property",
            "name": "files",
            "type": "{File[]}",
            "default": "[]",
            "class": "file-queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js",
            "line": 52,
            "access": "private",
            "tagname": "Flushes the `files` property when they have settled. This\nwill only flush files when all files have arrived at a terminus\nof their state chart.\n\n```\n    .------.     .---------.     .--------.\no--| queued |-->| uploading |-->| uploaded |\n    `------`     `---------`     `--------`\n       ^              |    .-------.\n       |              |`->| aborted |\n       |              |    `-------`\n       |  .------.    |    .---------.\n       `-| failed |<-` `->| timed_out |-.\n       |  `------`         `---------`  |\n       `-------------------------------`\n```\n\nFiles *may* be requeued by the uesr in the `failed` or `timed_out`\nstates.",
            "itemtype": "method",
            "name": "flushFilesWhenSettled",
            "class": "file-queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js",
            "line": 91,
            "description": "The total size of all files currently being uploaded in bytes.",
            "itemtype": "property",
            "name": "size",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "file-queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js",
            "line": 101,
            "description": "The number of bytes that have been uploaded to the server.",
            "itemtype": "property",
            "name": "loaded",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "file-queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js",
            "line": 111,
            "description": "The current progress of all uploads, as a percentage in the\nrange of 0 to 100.",
            "itemtype": "property",
            "name": "progress",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "file-queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js",
            "line": 127,
            "description": "Returns a queue with the given name",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the queue to find",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The queue or null if it doesn't exist yet.",
                "type": "Queue"
            },
            "class": "file-queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/services/file-queue.js",
            "line": 138,
            "description": "Create a new queue with the given name.",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "name",
                    "description": "The name of the queue to create",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The new queue.",
                "type": "Queue"
            },
            "class": "file-queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 78,
            "description": "A unique id generated for this file.",
            "itemtype": "property",
            "name": "",
            "type": "{String}",
            "readonly": "",
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 87,
            "description": "The file name.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 102,
            "description": "The size of the file in bytes.",
            "itemtype": "property",
            "name": "size",
            "type": "{Number}",
            "readonly": "",
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 111,
            "description": "The MIME type of the file.\n\nFor a image file this may be `image/png`.",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "readonly": "",
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 122,
            "description": "Returns the appropriate file extension of\nthe file according to the type",
            "itemtype": "property",
            "name": "extension",
            "type": "{String}",
            "readonly": "",
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 136,
            "itemtype": "property",
            "name": "loaded",
            "type": "{Number}",
            "default": "0",
            "readonly": "",
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 144,
            "itemtype": "property",
            "name": "progress",
            "type": "{Number}",
            "default": "0",
            "readonly": "",
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 152,
            "description": "The current state that the file is in.\nOne of:\n\n- `queued`\n- `uploading`\n- `timed_out`\n- `aborted`\n- `uploaded`\n- `failed`",
            "itemtype": "property",
            "name": "state",
            "type": "{String}",
            "default": "'queued'",
            "readonly": "",
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 170,
            "description": "The source of the file. This is useful\nfor applications that want to gather\nanalytics about how users upload their\ncontent.\n\nThis property can be one of the following:\n\n- `browse`\n- `drag-and-drop`\n- `web`\n- `data-url`\n- `blob`\n\n`browse` is the source when the file is created\nusing the native file picker.\n\n`drag-and-drop` is the source when the file was\ncreated using drag and drop from their desktop.\n\n`web` is the source when the file was created\nby dragging the file from another webpage.\n\n`data-url` is the source when the file is created\nfrom a data URL using the `fromDataURL` method for\nfiles. This usually means that the file was created\nmanually by the developer on behalf of the user.\n\n`blob` is the source when the file is created\nfrom a blob using the `fromBlob` method for\nfiles. This usually means that the file was created\nmanually by the developer.",
            "itemtype": "property",
            "name": "source",
            "type": "{String}",
            "default": "''",
            "readonly": "",
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 297,
            "description": "Creates a file object that can be read or uploaded to a\nserver from a Blob object.",
            "static": 1,
            "itemtype": "method",
            "name": "fromBlob",
            "params": [
                {
                    "name": "blob",
                    "description": "The blob to create the file from.",
                    "type": "Blob"
                },
                {
                    "name": "source",
                    "description": "The source that created the blob.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A file object",
                "type": "File"
            },
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/file.js",
            "line": 322,
            "description": "Creates a file object that can be read or uploaded to a\nserver from a data URL.",
            "static": 1,
            "itemtype": "method",
            "name": "fromDataURL",
            "params": [
                {
                    "name": "dataURL",
                    "description": "The data URL to create the file from.",
                    "type": "String"
                },
                {
                    "name": "source",
                    "description": "The source of the data URL.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A file object",
                "type": "File"
            },
            "class": "File"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 33,
            "description": "The FileQueue service.",
            "itemtype": "property",
            "name": "fileQueue",
            "type": "{FileQueue}",
            "class": "Queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 41,
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "file",
                    "description": "The file to append to the queue",
                    "type": "File"
                }
            ],
            "class": "Queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 51,
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_addFiles",
            "params": [
                {
                    "name": "fileList",
                    "description": "The event triggered from the DOM that contains a list of files",
                    "type": "FileList"
                }
            ],
            "class": "Queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 80,
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "file",
                    "description": "The file to remove from the queue.",
                    "type": "File"
                }
            ],
            "class": "Queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 90,
            "description": "The unique identifier of the queue.\n\nQueue names should be deterministic so they\ncan be retrieved. It's recommended to provide\na helpful name.\n\nIf the queue belongs to a top level collection,\nphotos, the good name for this queue may be `\"photos\"`.\n\nIf you're uploading images to an artwork, the\nbest name would incoporate both `\"artworks\"` and\nthe identifier of the artwork. A good name for this\nqueue may be `\"artworks/{{id}}/photos\"`, where `{{id}}`\nis a dynamic segment that is generated from the artwork id.",
            "itemtype": "property",
            "name": "name",
            "type": "{String}",
            "default": "null",
            "class": "Queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 112,
            "description": "The list of files in the queue. This automatically gets\nflushed when all the files in the queue have settled.\n\nNote that files that have failed need to be manually\nremoved from the queue. This is so they can be retried\nwithout resetting the state of the queue, orphaning the\nfile from its queue. Upload failures can happen due to a\ntimeout or a server response. If you choose to use the\n`abort` method, the file will fail to upload, but will\nbe removed from the requeuing proccess, and will be\nconsidered to be in a settled state.",
            "itemtype": "property",
            "name": "files",
            "type": "{File[]}",
            "default": "[]",
            "class": "Queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 131,
            "access": "private",
            "tagname": "Flushes the `files` property when they have settled. This\nwill only flush files when all files have arrived at a terminus\nof their state chart.\n\n```\n    .------.     .---------.     .--------.\no--| queued |-->| uploading |-->| uploaded |\n    `------`     `---------`     `--------`\n       ^              |    .-------.\n       |              |`->| aborted |\n       |              |    `-------`\n       |  .------.    |    .---------.\n       `-| failed |<-` `->| timed_out |-.\n       |  `------`         `---------`  |\n       `-------------------------------`\n```\n\nFiles *may* be requeued by the uesr in the `failed` or `timed_out`\nstates.",
            "itemtype": "method",
            "name": "flushFilesWhenSettled",
            "class": "Queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 170,
            "description": "The aggregate size (in bytes) of all files in the queue.",
            "itemtype": "property",
            "name": "size",
            "readonly": "",
            "type": "{Number}",
            "default": "0",
            "class": "Queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 180,
            "description": "The aggregate amount of bytes that have been uploaded\nto the server for all files in the queue.",
            "itemtype": "property",
            "name": "loaded",
            "readonly": "",
            "type": "{Number}",
            "default": "0",
            "class": "Queue"
        },
        {
            "file": "/Users/tevans3/bakery/ember-file-upload/tmp/broccoli_yuidoc-input_base_path-tLXk73CB.tmp/queue.js",
            "line": 191,
            "description": "The current upload progress of the queue, as a number from 0 to 100.",
            "itemtype": "property",
            "name": "progress",
            "readonly": "",
            "type": "{Number}",
            "default": "0",
            "class": "Queue"
        }
    ],
    "warnings": []
}